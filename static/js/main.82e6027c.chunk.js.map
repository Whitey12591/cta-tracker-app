{"version":3,"sources":["Assets/devin.jpeg","Components/TimeCard/TimeCard.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TimeCard","props","eta","arrT","timesRefreshed","prdt","destNm","now","moment","utc","format","then","react_default","a","createElement","Fragment","className","diff","App","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadData","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","axios","get","concat","result","setState","isLoaded","arrivals","data","state","stop","error","time","Date","inherits","createClass","key","value","setInterval","_this$state","ctatt","map","Components_TimeCard_TimeCard","src","devin","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oUCgCzBC,EAtBE,SAACC,GAA0B,IAClCC,EAAwBD,EAAxBC,IACAC,GADwBF,EAAnBG,eACkBF,EAAvBC,MAAME,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OAEhBC,EAAMC,IAAOC,IAAIJ,GAAMK,OAAO,uBAC9BC,EAAOH,IAAOC,IAAIN,GAAMO,OAAO,uBAEnC,OACEE,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,WAAMR,GACNM,EAAAC,EAAAC,cAAA,WACGN,IACEC,IAAID,IAAOG,EAAM,uBAAuBM,KAAKT,IAAOD,EAAK,yBACzDG,OAAO,KAAO,QAEnBE,EAAAC,EAAAC,cAAA,WAAMN,IAAOC,IAAIN,GAAMO,OAAO,+BCuCvBQ,SAlDf,SAAAC,GACE,SAAAD,EAAYjB,GAAY,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMtB,KAUR0B,SAXwBN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAhB,EAAAiB,KAWb,SAAAC,IAAA,OAAAF,EAAAhB,EAAAmB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACTC,IACGC,IACI,uCAFPC,OAAA,6HAIG3B,KAAK,SAAA4B,GACJnB,EAAKoB,SAAS,CACZC,UAAU,EACVC,SAAUH,EAAOI,KACjBvC,eAAgBgB,EAAKwB,MAAMxC,eAAiB,MATzC,wBAAA6B,EAAAY,SAAAd,MATTX,EAAKwB,MAAQ,CACXE,OAAO,EACPL,UAAU,EACVC,SAAU,GACVK,KAAM,IAAIC,KACV5C,eAAgB,GAPIgB,EAD1B,OAAAC,OAAA4B,EAAA,EAAA5B,CAAAH,EAAAC,GAAAE,OAAA6B,EAAA,EAAA7B,CAAAH,EAAA,EAAAiC,IAAA,oBAAAC,MAAA,WA2BI7B,KAAKI,WACL0B,YAAY9B,KAAKI,SAAU,OA5B/B,CAAAwB,IAAA,SAAAC,MAAA,WA+BW,IAAAE,EAC+C/B,KAAKqB,MAAnDE,EADDQ,EACCR,MAAOL,EADRa,EACQb,SAAUC,EADlBY,EACkBZ,SAAUtC,EAD5BkD,EAC4BlD,eACnC,OAAI0C,EACKlC,EAAAC,EAAAC,cAAA,sBACG2B,EAIR7B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACZ0B,EAASa,MAAMrD,IAAIsD,IAAI,SAACT,EAAWI,GAAZ,OACtBvC,EAAAC,EAAAC,cAAC2C,EAAD,CAAUN,IAAKA,EAAKjD,IAAK6C,EAAM3C,eAAgBA,MAEjDQ,EAAAC,EAAAC,cAAA,OAAK4C,IAAKC,IAAO3C,UAAU,WAPxBJ,EAAAC,EAAAC,cAAA,6BApCbI,EAAA,CAAyB0C,cCHLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,KAAK,SAAA+D,GACjCA,EAAaC","file":"static/js/main.82e6027c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/devin.218bf52c.jpeg\";","import React from 'react';\nimport { Eta } from '../../Data/cta_dto';\nimport './TimeCard.css';\nimport moment from 'moment';\n\ninterface ITimeCardProps {\n  eta: Eta;\n  timesRefreshed: number;\n}\n\nconst TimeCard = (props: ITimeCardProps) => {\n  const { eta, timesRefreshed } = props;\n  const { arrT, prdt, destNm } = eta;\n\n  var now = moment.utc(prdt).format('DD/MM/YYYY HH:mm:ss');\n  var then = moment.utc(arrT).format('DD/MM/YYYY HH:mm:ss');\n\n  return (\n    <React.Fragment>\n      <div className=\"card-container\">\n        <div>{destNm}</div>\n        <div>\n          {moment\n            .utc(moment(then, 'DD/MM/YYYY HH:mm:ss').diff(moment(now, 'DD/MM/YYYY HH:mm:ss')))\n            .format('m') + ' min'}\n        </div>\n        <div>{moment.utc(arrT).format('h:mm a')}</div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default TimeCard;\n","import React, { Component } from 'react'; // let's also import Component\nimport axios from 'axios';\nimport { RootObject, Eta } from './Data/cta_dto';\nimport TimeCard from './Components/TimeCard/TimeCard';\nimport devin from './Assets/devin.jpeg';\nimport './App.css';\n\ninterface IState {\n  error: boolean;\n  isLoaded: boolean;\n  arrivals: RootObject;\n  time: Date;\n  timesRefreshed: number;\n}\n\nexport class App extends Component<{}, IState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      error: false,\n      isLoaded: false,\n      arrivals: {} as RootObject,\n      time: new Date(),\n      timesRefreshed: 0\n    };\n  }\n\n  loadData = async () => {\n    axios\n      .get<RootObject>(\n        `${'https://cors-anywhere.herokuapp.com/'}https://lapi.transitchicago.com/api/1.0/ttarrivals.aspx?key=d4102257b59c4a0a82809fec190a2140&outputType=JSON&mapid=40360`\n      )\n      .then(result => {\n        this.setState({\n          isLoaded: true,\n          arrivals: result.data,\n          timesRefreshed: this.state.timesRefreshed + 1\n        });\n      });\n  };\n\n  componentDidMount() {\n    this.loadData();\n    setInterval(this.loadData, 10000);\n  }\n\n  render() {\n    const { error, isLoaded, arrivals, timesRefreshed } = this.state;\n    if (error) {\n      return <div>Error: </div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"app-container\">\n          {arrivals.ctatt.eta.map((time: Eta, key) => (\n            <TimeCard key={key} eta={time} timesRefreshed={timesRefreshed} />\n          ))}\n          <img src={devin} className=\"image\" />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}